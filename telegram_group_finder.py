import asyncio
import json
import os
from typing import List

from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from telethon import TelegramClient, errors
from telethon.tl.functions.contacts import SearchRequest
from telethon.tl.types import Channel, User

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ====
CONFIG_FILE = 'config.json'
RESULTS_FILE = 'results.json'

CHECK_PARTICIPANTS_LIMIT = 80
SEARCH_LIMIT_PER_KEYWORD = 40

# ==== –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ====
def load_config():
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            cfg = json.load(f)
        api_id = cfg.get('api_id')
        api_hash = cfg.get('api_hash')
        bot_token = cfg.get('bot_token')
    else:
        api_id = os.environ.get('TG_API_ID')
        api_hash = os.environ.get('TG_API_HASH')
        bot_token = os.environ.get('TG_BOT_TOKEN')

    if not (api_id and api_hash and bot_token):
        raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã api_id, api_hash –∏–ª–∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config.json –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

    return int(api_id), str(api_hash), str(bot_token)

# ==== –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø ====
async def search_groups(client: TelegramClient, keyword: str) -> List[dict]:
    found = {}

    try:
        res = await client(SearchRequest(q=keyword, limit=SEARCH_LIMIT_PER_KEYWORD))
    except errors.FloodWaitError as e:
        print(f'FloodWait: –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥.')
        return []
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ "{keyword}": {e}')
        return []

    chats = res.chats if hasattr(res, 'chats') else []

    print(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{keyword}' –Ω–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤: {len(chats)}")

    for chat in chats:
        title = getattr(chat, 'title', 'NO TITLE')
        megagroup = getattr(chat, 'megagroup', False)
        username = getattr(chat, 'username', None)
        print(f"–ù–∞–π–¥–µ–Ω —á–∞—Ç: {title} | megagroup={megagroup} | username={username}")

        if not isinstance(chat, Channel):
            continue

        if megagroup and username:
            chat_id = chat.id
            found_key = f'{chat_id}:{username}'
            if found_key not in found:
                found[found_key] = {
                    'id': chat_id,
                    'title': title,
                    'username': username,
                    'access_hash': getattr(chat, 'access_hash', None),
                    'participants_count': getattr(chat, 'participants_count', None),
                    'has_bots': None,
                    'checked_participants': 0,
                    'keyword': keyword
                }

    return list(found.values())

async def check_group_for_bots(client: TelegramClient, chat_info: dict) -> dict:
    username = chat_info['username']

    try:
        entity = await client.get_entity(username)
    except Exception as e:
        print(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity –¥–ª—è @{username}: {e}')
        return chat_info

    try:
        participants = await client.get_participants(entity, limit=CHECK_PARTICIPANTS_LIMIT)
    except errors.FloodWaitError as e:
        print(f'FloodWait –ø—Ä–∏ get_participants @{username}: –∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫.')
        return chat_info
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ get_participants @{username}: {e}')
        return chat_info

    chat_info['checked_participants'] = len(participants)
    found_bot = False
    for p in participants:
        if isinstance(p, User) and getattr(p, 'bot', False):
            found_bot = True
            break

    chat_info['has_bots'] = found_bot
    return chat_info

# ==== –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç ====
async def main_bot():
    api_id, api_hash, bot_token = load_config()

    bot = Bot(token=bot_token)
    dp = Dispatcher()

    telethon_client = TelegramClient('session_group_finder', api_id, api_hash)
    await telethon_client.start()

    last_results = []

    @dp.message(Command(commands=['start']))
    async def cmd_start(message: Message):
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ Telegram Group Finder.\n"
            "–ò—â–∏ –ø—É–±–ª–∏—á–Ω—ã–µ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã –±–µ–∑ –±–æ—Ç–æ–≤.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
            "/search <—Å–ª–æ–≤–æ> ‚Äî –ø–æ–∏—Å–∫ –≥—Ä—É–ø–ø –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É\n"
            "/results ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã"
        )

    @dp.message(Command(commands=['search']))
    async def cmd_search(message: Message):
        args = message.text.split(maxsplit=1)
        if len(args) < 2 or not args[1].strip():
            await message.answer("‚ùå –ù–∞–ø–∏—à–∏: /search <–∫–ª—é—á–µ–≤–æ–µ_—Å–ª–æ–≤–æ>")
            return

        keyword = args[1].strip().lower()
        await message.answer(f"üîç –ò—â—É –≥—Ä—É–ø–ø—ã –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: <b>{keyword}</b>", parse_mode="HTML")

        candidates = await search_groups(telethon_client, keyword)
        if not candidates:
            await message.answer("üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
            return

        # –í—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–≤–æ–¥–∏–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        text = f"–ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø (–≤–∫–ª—é—á–∞—è –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç–æ–≤): {len(candidates)}\n\n"
        text += "\n".join([f"‚Ä¢ {c['title']} (@{c['username']})" for c in candidates[:20]])
        await message.answer(text)

        # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–æ—Ç–æ–≤
        good_groups = []
        for c in candidates:
            updated = await check_group_for_bots(telethon_client, c)
            if updated['checked_participants'] == 0:
                continue
            if updated['has_bots'] is False:
                good_groups.append(updated)
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å flood
            await asyncio.sleep(1)

        if not good_groups:
            await message.answer("üòî –ì—Ä—É–ø–ø—ã –±–µ–∑ –±–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            last_results.clear()
            return

        last_results.clear()
        last_results.extend(good_groups)

        text = f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –±–µ–∑ –±–æ—Ç–æ–≤: {len(good_groups)}\n\n"
        text += "\n".join([f"‚Ä¢ {g['title']} (@{g['username']}) ‚Äî –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {g['checked_participants']}" for g in good_groups[:20]])
        await message.answer(text)

        with open(RESULTS_FILE, 'w', encoding='utf-8') as f:
            json.dump(good_groups, f, ensure_ascii=False, indent=2)

    @dp.message(Command(commands=['results']))
    async def cmd_results(message: Message):
        if not last_results:
            await message.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç—ã. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /search.")
            return

        text = f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –±–µ–∑ –±–æ—Ç–æ–≤ ({len(last_results)}):\n\n"
        text += "\n".join([f"‚Ä¢ {g['title']} (@{g['username']}) ‚Äî –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {g['checked_participants']}" for g in last_results[:20]])
        await message.answer(text)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

    await telethon_client.disconnect()

if __name__ == '__main__':
    try:
        asyncio.run(main_bot())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
