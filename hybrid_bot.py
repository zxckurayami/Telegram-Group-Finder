import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from telethon import TelegramClient
from telethon.errors.rpcerrorlist import FloodWaitError

# ---- –ù–ê–°–¢–†–û–ô–ö–ò ----
API_ID = 24896295                 # —Ç–≤–æ–π API ID –æ—Ç my.telegram.org
API_HASH = "bebc7a01ac21bc2eaabd249ad38f0093"       # —Ç–≤–æ–π API HASH –æ—Ç my.telegram.org
BOT_TOKEN = "8338297343:AAGlCuiU0fLru1QNbgg52WOyVf1Iy330V9g"    # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
SESSION_NAME = "24896295"    # –∏–º—è —Å–µ—Å—Å–∏–∏ Telethon

# ---- –ó–ê–ü–£–°–ö –ö–õ–ò–ï–ù–¢–û–í ----
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
telethon_client = TelegramClient(SESSION_NAME, API_ID, API_HASH)

# ---- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /find ----
@dp.message(Command(commands=["find"]))
async def find_groups(message: Message):
    query = message.text.split(maxsplit=1)
    if len(query) < 2:
        await message.answer("‚ùå –ù–∞–ø–∏—à–∏ —Ç–∞–∫: /find —Å–ª–æ–≤–æ")
        return
    
    search_term = query[1]
    await message.answer(f"üîç –ò—â—É –≥—Ä—É–ø–ø—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: <b>{search_term}</b>", parse_mode="HTML")

    try:
        results = []
        async for dialog in telethon_client.iter_dialogs():
            if dialog.is_group and search_term.lower() in dialog.title.lower():
                results.append(f"üìå {dialog.title}")

        if results:
            await message.answer("\n".join(results[:20]))  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        else:
            await message.answer("üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    except FloodWaitError as e:
        await message.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏ {e.seconds} —Å–µ–∫—É–Ω–¥ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram).")

# ---- –ó–ê–ü–£–°–ö ----
async def main():
    await telethon_client.start()  # –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telethon
    await dp.start_polling(bot)    # –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞

if __name__ == "__main__":
    asyncio.run(main())
